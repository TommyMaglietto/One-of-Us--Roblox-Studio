-- FlashlightClient.local.lua

local tool       = script.Parent
local Players    = game:GetService("Players")
local RunService = game:GetService("RunService")
local cam        = workspace.CurrentCamera
local plr        = Players.LocalPlayer

local ToggleRequest = tool:WaitForChild("ToggleRequest")
local Battery       = tool:WaitForChild("Battery") -- NumberValue

-- Hide world/tool lights locally so owner only sees the viewmodel beam
local function hideServerLights()
	for _, d in ipairs(tool:GetDescendants()) do
		if d:IsA("SpotLight") or d:IsA("SurfaceLight") or d:IsA("PointLight") then
			d.Enabled = false
		end
	end
end

local function setViewmodel(enabled: boolean)
	local vm = cam:FindFirstChild("FlashLight viewmodel")
	if not vm then return end
	local lp = vm:FindFirstChild("LightPart")
	if not lp then return end
	local ring = lp:FindFirstChild("Ring") or lp:FindFirstChildWhichIsA("Light")
	if ring and ring:IsA("Light") then
		ring.Enabled = enabled
	elseif ring then
		local l = ring:FindFirstChildWhichIsA("Light")
		if l then l.Enabled = enabled end
	end
end

-- Render from authoritative server state only
local function applyFromAuthoritative()
	local isOn = tool:GetAttribute("IsOn") == true
	local hasJuice = Battery.Value > 0
	setViewmodel(isOn and hasJuice)
	hideServerLights()
end

-- CLICK: ask server to toggle; DO NOT pre-enable locally
tool.Activated:Connect(function()
	local desired = not (tool:GetAttribute("IsOn") == true)
	ToggleRequest:FireServer(desired)
	-- keep world lights hidden; viewmodel will update when server flips IsOn
	hideServerLights()
end)

tool.Equipped:Connect(applyFromAuthoritative)

RunService.RenderStepped:Connect(function()
	if tool.Parent == plr.Character then
		hideServerLights()
	end
end)

tool:GetAttributeChangedSignal("IsOn"):Connect(applyFromAuthoritative)
Battery.Changed:Connect(applyFromAuthoritative)

applyFromAuthoritative()
