-- StarterPlayerScripts/RoleClient.client.lua
-- Uses prebuilt StarterGui "StudioBootGui". Forces boot above everything, disables controls until Active.
-- Plays a shared roll then reads a single shared RevealRoles payload so everyone flips together.
-- Now includes reveal_uid de-dup so RevealBegin and RevealRoles only apply once per round.

local Players      = game:GetService("Players")
local RS           = game:GetService("ReplicatedStorage")
local RunService   = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local function clog(fmt, ...) print(string.format("[RoleClient %s] "..fmt, player.Name, ...)) end

local Remotes     = RS:WaitForChild("Remotes")
local RoundPhase  = Remotes:WaitForChild("RoundPhase")
local ClientReady = Remotes:WaitForChild("ClientReady")
local ClientAck   = Remotes:WaitForChild("ClientAck")

local pg = player:WaitForChild("PlayerGui")

-- Boot GUI
local bootGui = pg:WaitForChild("StudioBootGui")
bootGui.DisplayOrder = 10000
bootGui.Enabled = true
local bootRoot = bootGui:WaitForChild("Root")
local bootWaitText = bootRoot:WaitForChild("WaitText")
local bootSub = bootRoot:WaitForChild("SubText")
bootWaitText.Text = "Waiting for players."
bootSub.Text = "Ready 0 / 0   Present 0   Starting soon"

-- Role reveal GUI you already have
local roleGui   = pg:WaitForChild("RoleRevealGui")
roleGui.DisplayOrder = 5000
roleGui.Enabled = false
local card      = roleGui:WaitForChild("Card")
local rolling   = card:WaitForChild("RollingLabel")
local result    = card:WaitForChild("ResultLabel")
local bottom    = card:WaitForChild("BottomHint")
local sfx       = card:FindFirstChildWhichIsA("Sound")

local statusLabel = card:FindFirstChild("StatusLabel")
if not statusLabel then
	statusLabel = Instance.new("TextLabel")
	statusLabel.Name = "StatusLabel"
	statusLabel.BackgroundTransparency = 1
	statusLabel.Size = UDim2.new(1, 0, 0, 48)
	statusLabel.Position = UDim2.new(0, 0, 0.55, 0)
	statusLabel.Font = Enum.Font.GothamBold
	statusLabel.TextScaled = true
	statusLabel.TextColor3 = Color3.new(1,1,1)
	statusLabel.TextStrokeTransparency = 0.5
	statusLabel.ZIndex = 20
	statusLabel.Text = ""
	statusLabel.Visible = false
	statusLabel.Parent = card
end

-- Controls: lock walking and jumping during Waiting and Reveal
local function setControlsEnabled(enabled)
	local playerModule = require(player:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule"))
	local controls = playerModule:GetControls()
	if enabled then controls:Enable() else controls:Disable() end

	local char = player.Character or player.CharacterAdded:Wait()
	local hum  = char:WaitForChild("Humanoid")
	if enabled then
		player.CameraMode = Enum.CameraMode.Classic
		hum.WalkSpeed, hum.JumpPower = 16, 50
	else
		player.CameraMode = Enum.CameraMode.LockFirstPerson
		hum.WalkSpeed, hum.JumpPower = 0, 0
	end
end

-- Fade utility
local function collectGuiTargets(root)
	local list = {}
	for _, d in ipairs(root:GetDescendants()) do
		if d:IsA("GuiObject") then table.insert(list, d) end
	end
	return list
end
local function fadeOutGuiThenHide(gui, duration)
	duration = duration or 0.6
	local tweens, originals = {}, {}
	local function addTween(inst, prop, toValue)
		local fromValue = inst[prop]
		table.insert(originals, {inst=inst, prop=prop, value=fromValue})
		local tw = TweenService:Create(inst, TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {[prop]=toValue})
		table.insert(tweens, tw)
		return tw
	end
	for _, g in ipairs(collectGuiTargets(gui)) do
		if g.BackgroundTransparency < 1 then addTween(g, "BackgroundTransparency", 1) end
		if (g:IsA("ImageLabel") or g:IsA("ImageButton")) and g.Image ~= "" and g.ImageTransparency < 1 then
			addTween(g, "ImageTransparency", 1)
		end
		if (g:IsA("TextLabel") or g:IsA("TextButton")) and g.Text ~= "" then
			if g.TextTransparency < 1 then addTween(g, "TextTransparency", 1) end
			if g.TextStrokeTransparency < 1 then addTween(g, "TextStrokeTransparency", 1) end
		end
		local stroke = g:FindFirstChildOfClass("UIStroke")
		if stroke and stroke.Transparency < 1 then addTween(stroke, "Transparency", 1) end
	end
	for _, t in ipairs(tweens) do t:Play() end
	local elapsed = 0
	while elapsed < duration do elapsed += RunService.Heartbeat:Wait() end
	gui.Enabled = false
	for _, rec in ipairs(originals) do if rec.inst and rec.inst.Parent then rec.inst[rec.prop] = rec.value end end
end

-- Animated ellipses for boot
local ellipsisConn = nil
local function startEllipsis()
	if ellipsisConn then return end
	local dots = {".","..","...","..","."}
	local idx, acc = 1, 0
	ellipsisConn = RunService.Heartbeat:Connect(function(dt)
		acc += dt
		if acc >= 0.5 then
			acc = 0
			idx = (idx % #dots) + 1
			bootWaitText.Text = "Waiting for players" .. dots[idx]
		end
	end)
end
local function stopEllipsis()
	if ellipsisConn then ellipsisConn:Disconnect(); ellipsisConn = nil end
end
startEllipsis()

-- ProgressionUI hidden until Active
local progressionVisibleAllowed = false
local function applyProgressionVisibility()
	local gui = pg:FindFirstChild("ProgressionUI")
	if gui then
		if gui:IsA("ScreenGui") then
			gui.Enabled = progressionVisibleAllowed
		elseif gui:IsA("GuiObject") then
			gui.Visible = progressionVisibleAllowed
		end
	end
end
pg.ChildAdded:Connect(function(child)
	if child.Name == "ProgressionUI" then
		if child:IsA("ScreenGui") then child.Enabled = progressionVisibleAllowed
		elseif child:IsA("GuiObject") then child.Visible = progressionVisibleAllowed end
	end
end)
applyProgressionVisibility()

-- Roll animation container
local rollContainer = card:FindFirstChild("RollContainer")
if not rollContainer then
	rollContainer = Instance.new("Frame")
	rollContainer.Name = "RollContainer"
	rollContainer.AnchorPoint = Vector2.new(0.5, 0.5)
	rollContainer.Position = UDim2.fromScale(0.5, 0.35)
	rollContainer.Size = UDim2.fromOffset(500, 120)
	rollContainer.BackgroundTransparency = 1
	rollContainer.ClipsDescendants = true
	rollContainer.ZIndex = 18
	rollContainer.Parent = card

	local list = Instance.new("Frame")
	list.Name = "List"
	list.Size = UDim2.new(1,0,0, 120*6)
	list.BackgroundTransparency = 1
	list.Parent = rollContainer

	local layout = Instance.new("UIListLayout")
	layout.FillDirection = Enum.FillDirection.Vertical
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 8)
	layout.Parent = list

	local function addRow(text)
		local lbl = Instance.new("TextLabel")
		lbl.Size = UDim2.new(1, 0, 0, 120)
		lbl.BackgroundTransparency = 1
		lbl.Font = Enum.Font.GothamBlack
		lbl.TextScaled = true
		lbl.TextColor3 = Color3.new(1,1,1)
		lbl.TextStrokeTransparency = 0.4
		lbl.Text = text
		lbl.ZIndex = 18
		lbl.Parent = list
	end
	addRow("HUMAN"); addRow("SKINWALKER"); addRow("HUMAN")
	addRow("SKINWALKER"); addRow("HUMAN"); addRow("SKINWALKER")
end

local function playRollAnimation(duration)
	duration = duration or 3.0
	roleGui.Enabled = true
	card.Visible = true
	rollContainer.Visible = true
	statusLabel.Visible = false
	rolling.Visible = false
	result.Visible = false
	bottom.Text = "Determining your role..."

	local list = rollContainer:FindFirstChild("List")
	list.Position = UDim2.fromOffset(0, 0)
	local totalHeight = list.AbsoluteSize.Y
	local rowHeight = totalHeight / 6
	local target = -(rowHeight * 5 + rowHeight * 0.6)

	local tween = TweenService:Create(
		list,
		TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{ Position = UDim2.fromOffset(0, target) }
	)
	tween:Play()
	local elapsed = 0
	while elapsed < duration do elapsed += RunService.Heartbeat:Wait() end
	list.Position = UDim2.fromOffset(0, -(rowHeight * 6))
end

local function hideRoleAll()
	roleGui.Enabled = false
	card.Visible = false
	rollContainer.Visible = false
	rolling.Visible = false
	result.Visible = false
	statusLabel.Visible = false
	rolling.Text = ""
	result.Text = ""
	statusLabel.Text = ""
	bottom.Text = ""
	card.BackgroundTransparency = 0
end

-- New de-dup state per reveal
local currentRevealUid = -1
local seenBegin = false
local seenRoles = false
local function ensureReveal(uid)
	if uid ~= currentRevealUid then
		currentRevealUid = uid
		seenBegin = false
		seenRoles = false
	end
end

-- Phase handler
RoundPhase.OnClientEvent:Connect(function(msg)
	local phase = msg.phase
	local p     = msg.payload or {}
	local uid   = tonumber(p.reveal_uid) or -1
	clog("Phase=%s", tostring(phase))

	if phase == "Waiting" then
		setControlsEnabled(false)
		progressionVisibleAllowed = false
		applyProgressionVisibility()

		hideRoleAll()
		bootGui.Enabled = true
		bootWaitText.Text = "Waiting for players."
		bootSub.Text = ("Ready %d / %d   Present %d   Starting soon"):format(0, p.expected or 0, 0)

	elseif phase == "WaitingUpdate" then
		bootSub.Text = ("Ready %d / %d   Present %d   Starting in %ds"):format(
			p.ready or 0, p.expected or 0, p.present or 0, p.secondsLeft or 0
		)

	elseif phase == "WaitingEnd" then
		ensureReveal(uid)
		progressionVisibleAllowed = false
		applyProgressionVisibility()
		stopEllipsis()
		fadeOutGuiThenHide(bootGui, 0.25)
		task.defer(function()
			pcall(function() ClientAck:FireServer({phase = "WaitingEnd"}) end)
		end)

	elseif phase == "RevealBegin" then
		ensureReveal(uid)
		if seenBegin then return end
		seenBegin = true

		if bootGui.Enabled then
			stopEllipsis()
			fadeOutGuiThenHide(bootGui, 0.2)
		end
		progressionVisibleAllowed = false
		applyProgressionVisibility()
		playRollAnimation(p.roll or 3.0)

	elseif phase == "RevealRoles" then
		ensureReveal(uid)
		if seenRoles then return end
		seenRoles = true

		local map = p.assignments or {}
		local myRole = map[tostring(player.UserId)] or "Human"

		rollContainer.Visible = false
		result.Visible  = true
		local upper = tostring(myRole):upper()
		result.Text = "You are a â€¦\n" .. upper
		clog("RevealRoles received (shared) = %s", upper)
		if sfx and sfx.SoundId and sfx.SoundId ~= "" then
			pcall(function() sfx.TimePosition = 0; sfx:Play() end)
		end

	elseif phase == "Active" then
		ensureReveal(uid)
		progressionVisibleAllowed = true
		applyProgressionVisibility()
		fadeOutGuiThenHide(roleGui, 0.4)
		setControlsEnabled(true)

	elseif phase == "RoundEnd" then
		progressionVisibleAllowed = false
		applyProgressionVisibility()
		stopEllipsis()
		if bootGui.Enabled then fadeOutGuiThenHide(bootGui, 0.2) end
		fadeOutGuiThenHide(roleGui, 0.2)
		setControlsEnabled(true)
	end
end)

-- Ready handshake
local firedReady = false
local function fireReadyOnce()
	if firedReady then return end
	firedReady = true
	task.defer(function()
		local character = player.Character or player.CharacterAdded:Wait()
		character:WaitForChild("Humanoid")
		task.wait(0.25)
		clog("ClientReady â†’ sending")
		pcall(function() ClientReady:FireServer() end)
	end)
end
if player.Character then fireReadyOnce() end
player.CharacterAdded:Connect(function()
	firedReady = false
	fireReadyOnce()
end)
