-- StarterPlayerScripts/RoleClient.client.lua
local Players    = game:GetService("Players")
local RS         = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

local Remotes     = RS:WaitForChild("Remotes")
local RoundPhase  = Remotes:WaitForChild("RoundPhase")
local ClientReady = Remotes:WaitForChild("ClientReady")
local ClientAck   = Remotes:WaitForChild("ClientAck")

-- UI (existing)
local gui      = player:WaitForChild("PlayerGui"):WaitForChild("RoleRevealGui")
local card     = gui:WaitForChild("Card")
local rolling  = card:WaitForChild("RollingLabel")   -- used ONLY for flip animation
local result   = card:WaitForChild("ResultLabel")    -- used ONLY for final role text
local bottom   = card:WaitForChild("BottomHint")     -- helper hint line
local sfx      = card:FindFirstChildWhichIsA("Sound")

-- Create a dedicated Waiting label so we never reuse 'result' for Ready text
local statusLabel = card:FindFirstChild("StatusLabel")
if not statusLabel then
	statusLabel = Instance.new("TextLabel")
	statusLabel.Name = "StatusLabel"
	statusLabel.BackgroundTransparency = 1
	statusLabel.Size = UDim2.new(1, 0, 0, 48)
	statusLabel.Position = UDim2.new(0, 0, 0.55, 0)
	statusLabel.Font = Enum.Font.GothamBold
	statusLabel.TextScaled = true
	statusLabel.TextColor3 = Color3.new(1,1,1)
	statusLabel.TextStrokeTransparency = 0.5
	statusLabel.ZIndex = 20 -- sits above card background, but we’ll toggle visibility anyway
	statusLabel.Parent = card
end

-- Ensure phase layers can’t overlap visually
card.ZIndex = 10
rolling.ZIndex = 15
result.ZIndex = 16
bottom.ZIndex = 17
statusLabel.ZIndex = 18

-- Controls helper
local function setControlsEnabled(enabled)
	local playerModule = require(player:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule"))
	local controls = playerModule:GetControls()
	if enabled then controls:Enable() else controls:Disable() end

	local char = player.Character or player.CharacterAdded:Wait()
	local hum  = char:WaitForChild("Humanoid")
	if enabled then
		player.CameraMode = Enum.CameraMode.Classic
		hum.WalkSpeed, hum.JumpPower = 16, 50
	else
		player.CameraMode = Enum.CameraMode.LockFirstPerson
		hum.WalkSpeed, hum.JumpPower = 0, 0
	end
end

-- Hard resets so no ghost text persists across frames
local function hideAll()
	gui.Enabled = false
	card.Visible = false
	rolling.Visible = false
	result.Visible = false
	statusLabel.Visible = false
	rolling.Text = ""
	result.Text = ""
	statusLabel.Text = ""
	bottom.Text = ""
	card.BackgroundTransparency = 1
end

local function showWaiting()
	gui.Enabled = true
	card.Visible = true
	card.BackgroundTransparency = 0

	-- Waiting layer ON
	statusLabel.Visible = true
	statusLabel.Text = "Waiting For Players"

	-- Reveal layer OFF
	rolling.Visible = false
	rolling.Text = ""
	result.Visible = false
	result.Text = ""

	bottom.Text = "Preparing..."
end

local function updateWaiting(payload)
	if not gui.Enabled or not statusLabel.Visible then
		showWaiting()
	end
	-- Only StatusLabel changes during Waiting
	statusLabel.Text = string.format("Ready %d / %d", payload.ready or 0, payload.expected or 0)
	bottom.Text = string.format("Starting in %ds  Present %d", payload.secondsLeft or 0, payload.present or 0)
end

local function hideWaiting()
	-- Turn the Waiting layer OFF before we ACK
	statusLabel.Visible = false
	statusLabel.Text = ""
	bottom.Text = ""
	-- keep card hidden so the next phase draws cleanly on a fresh surface
	gui.Enabled = false
	card.Visible = false
end

local FLIP_WORDS = {"Skinwalker","Human","Human","Skinwalker","Human"}
local function playFlipAnimation(duration)
	-- Only RollingLabel is active during flip
	rolling.Visible = true
	result.Visible  = false
	statusLabel.Visible = false
	rolling.Text = "—"
	local t, step = 0, 0.08
	while t < duration do
		rolling.Text = FLIP_WORDS[(math.floor(t/step) % #FLIP_WORDS) + 1]
		local dt = RunService.Heartbeat:Wait()
		t += dt
	end
end

-- Phase handler
RoundPhase.OnClientEvent:Connect(function(msg)
	local phase = msg.phase
	local p     = msg.payload or {}

	if phase == "Waiting" then
		setControlsEnabled(false)
		hideAll()
		showWaiting()

	elseif phase == "WaitingUpdate" then
		updateWaiting(p)

	elseif phase == "WaitingEnd" then
		-- Absolutely hide waiting visuals before acknowledging
		hideWaiting()
		task.defer(function()
			pcall(function() ClientAck:FireServer({phase = "WaitingEnd"}) end)
		end)

	elseif phase == "RevealBegin" then
		-- Clean slate: only reveal elements
		gui.Enabled = true
		card.Visible = true
		card.BackgroundTransparency = 0

		-- Waiting OFF
		statusLabel.Visible = false
		statusLabel.Text = ""

		-- Reveal prep
		result.Visible = false
		result.Text = ""
		bottom.Text = "Determining your role..."
		playFlipAnimation(p.flip or 3.0)

	elseif phase == "RevealRole" then
		-- Only the final role text is shown now
		rolling.Visible = false
		rolling.Text = ""
		statusLabel.Visible = false
		statusLabel.Text = ""

		result.Visible  = true
		result.Text     = "You are a ...\n" .. tostring(p.role or "Human")

		if sfx and sfx.SoundId and sfx.SoundId ~= "" then
			pcall(function() sfx.TimePosition = 0; sfx:Play() end)
		end

		-- local graceful fade; server will switch to Active after hold
		task.delay(p.hold or 3.0, function()
			for i = 1, 12 do
				card.BackgroundTransparency = math.clamp(i/12, 0, 1)
				RunService.Heartbeat:Wait()
			end
		end)

	elseif phase == "Active" then
		hideAll()
		setControlsEnabled(true)

	elseif phase == "RoundEnd" then
		hideAll()
		setControlsEnabled(true)
	end
end)

-- Tell server we're ready after spawn/UI mount
local function fireReadyOnce()
	task.defer(function()
		local character = player.Character or player.CharacterAdded:Wait()
		character:WaitForChild("Humanoid")
		task.wait(0.25)
		pcall(function() ClientReady:FireServer() end)
	end)
end

if player.Character then fireReadyOnce() end
player.CharacterAdded:Connect(fireReadyOnce)
